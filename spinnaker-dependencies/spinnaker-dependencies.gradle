apply plugin: "java-platform"
apply plugin: "maven-publish"

// without this building the pom fails when using the Nebula publishing plugin
configurations {
  compileOnly
}

javaPlatform {
  allowDependencies()
}

publishing {
  publications {
    nebula(MavenPublication) {
      from components.javaPlatform
    }
  }
}

ext {
  versions = [
    aws            : "1.11.723",
    bouncycastle   : "1.61",
    groovy         : "2.5.10", //this needs to keep in sync with the version from boot... if we could get rid of groovy-all we'd no longer need this
    hystrix        : "1.4.21",
    jsch           : "0.1.54",
    jschAgentProxy : "0.0.9",
    protobuf       : "3.9.1",
    okhttp         : "2.7.0",
    okhttp3        : "3.14.2",
    resilience4j   : "1.0.0",
    retrofit       : "1.9.0",
    retrofit2      : "2.8.1",
    spectator      : "0.103.0",
    spek           : "1.2.1",
    springBoot     : "2.2.4.RELEASE",
    springCloud    : "Greenwich.SR2",
    swagger        : "2.9.2"
  ]
}

dependencies {
  /*
   * These are 3rd party BOMs we inherit from. Any version constraints they contain we get
   * transitively.
   *
   * Order matters somewhat here in that if multiple BOMs constrain the same things the FIRST wins.
   * For example, `junit-bom` and `jackson-bom` will win out over the versions of JUnit and Jackson
   * specified by `spring-boot-dependencies`.
   */
  api(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.3.5"))
  //kotlinVersion comes from gradle.properties since we have kotlin code in
  // this project and need to configure gradle plugins etc.
  api(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
  api(platform("org.junit:junit-bom:5.6.2"))
  api(platform("com.fasterxml.jackson:jackson-bom:2.10.3"))
  api(platform("org.springframework.boot:spring-boot-dependencies:${versions.springBoot}"))
  api(platform("com.amazonaws:aws-java-sdk-bom:${versions.aws}"))
  api(platform("org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"))
  api(platform("io.strikt:strikt-bom:0.25.0"))
  api(platform("org.spockframework:spock-bom:1.3-groovy-2.5"))
  api(platform("com.oracle.oci.sdk:oci-java-sdk-bom:1.5.17"))
  api(platform("org.testcontainers:testcontainers-bom:1.13.0"))
  api(platform("com.google.protobuf:protobuf-bom:${versions.protobuf}"))

  constraints {
    api("cglib:cglib-nodep:3.2.0")
    api("com.amazonaws:aws-java-sdk:${versions.aws}")
    api("com.google.api-client:google-api-client:1.28.0")
    api("com.google.auth:google-auth-library-oauth2-http:0.18.0")
    api("com.google.apis:google-api-services-admin-directory:directory_v1-rev105-1.25.0")
    api("com.google.apis:google-api-services-cloudbuild:v1-rev836-1.25.0")
    api("com.google.apis:google-api-services-compute:alpha-rev20200225-1.30.9")
    api("com.google.apis:google-api-services-iam:v1-rev267-1.25.0")
    api("com.google.apis:google-api-services-monitoring:v3-rev477-1.25.0")
    api("com.google.apis:google-api-services-storage:v1-rev141-1.25.0")
    api("com.google.code.findbugs:jsr305:3.0.2")
    api("com.google.guava:guava:28.2-jre")
    // JinJava 2.5.3 has a bad bug: https://github.com/HubSpot/jinjava/issues/429
    api("com.hubspot.jinjava:jinjava:2.5.2")
    api("com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0")
    api("com.jcraft.jsch:${versions.jsch}")
    api("com.jcraft:jsch.agentproxy.connector-factory:${versions.jschAgentProxy}")
    api("com.jcraft:jsch.agentproxy.jsch:${versions.jschAgentProxy}")
    api("com.natpryce:hamkrest:1.4.2.2")
    api("com.netflix.archaius:archaius-core:0.7.7")
    api("com.netflix.awsobjectmapper:awsobjectmapper:${versions.aws}")
    api("com.netflix.dyno:dyno-jedis:1.7.2")
    api("com.netflix.eureka:eureka-client:1.9.18")
    api("com.netflix.frigga:frigga:0.24.0")
    api("com.netflix.hystrix:hystrix-core:${versions.hystrix}")
    api("com.netflix.hystrix:hystrix-javanica:${versions.hystrix}")
    api("com.netflix.netflix-commons:netflix-eventbus:0.3.0")
    api("com.netflix.spectator:spectator-api:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-aws:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-gc:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-jvm:${versions.spectator}")
    api("com.netflix.spectator:spectator-nflx-plugin:${versions.spectator}")
    api("com.netflix.spectator:spectator-reg-atlas:${versions.spectator}")
    api("com.netflix.spectator:spectator-web-spring:${versions.spectator}")
    api("com.netflix.spinnaker.embedded-redis:embedded-redis:0.8.0")
    api("com.netflix.spinnaker.moniker:moniker:0.2.0")
    api("com.nhaarman.mockitokotlin2:mockito-kotlin:1.5.0")
    api("com.nhaarman:mockito-kotlin:1.5.0")
    api("com.ninja-squad:springmockk:2.0.0")
    api("com.squareup.okhttp3:logging-interceptor:${versions.okhttp3}")
    api("com.squareup.okhttp3:mockwebserver:${versions.okhttp3}")
    api("com.squareup.okhttp3:okhttp-sse:${versions.okhttp3}")
    api("com.squareup.okhttp3:okhttp-urlconnection:${versions.okhttp3}")
    api("com.squareup.okhttp3:okhttp:${versions.okhttp3}")
    api("com.squareup.okhttp:mockwebserver:${versions.okhttp}")
    api("com.squareup.okhttp:okhttp-apache:${versions.okhttp}")
    api("com.squareup.okhttp:okhttp-urlconnection:${versions.okhttp}")
    api("com.squareup.okhttp:okhttp:${versions.okhttp}")
    api("com.squareup.retrofit2:converter-jackson:${versions.retrofit2}")
    api("com.squareup.retrofit2:retrofit-mock:${versions.retrofit2}")
    api("com.squareup.retrofit2:retrofit:${versions.retrofit2}")
    api("com.squareup.retrofit:converter-jackson:${versions.retrofit}")
    api("com.squareup.retrofit:converter-simplexml:${versions.retrofit}")
    api("com.squareup.retrofit:retrofit-mock:${versions.retrofit}")
    api("com.squareup.retrofit:retrofit:${versions.retrofit}")
    api("com.sun.xml.bind:jaxb-core:2.3.0.1")
    api("com.sun.xml.bind:jaxb-impl:2.3.2")
    api("commons-configuration:commons-configuration:1.8")
    api("commons-io:commons-io:2.5")
    api("de.danielbechler:java-object-diff:0.95")
    api("de.huxhorn.sulky:de.huxhorn.sulky.ulid:8.2.0")
    api("dev.minutest:minutest:1.11.0")
    api("io.github.resilience4j:resilience4j-annotations:${versions.resilience4j}")
    api("io.github.resilience4j:resilience4j-circuitbreaker:${versions.resilience4j}")
    api("io.github.resilience4j:resilience4j-kotlin:${versions.resilience4j}")
    api("io.github.resilience4j:resilience4j-retry:${versions.resilience4j}")
    api("io.github.resilience4j:resilience4j-spring-boot2:${versions.resilience4j}")
    api("io.mockk:mockk:1.9.3")
    api("io.springfox:springfox-swagger-ui:${versions.swagger}")
    api("io.springfox:springfox-swagger2:${versions.swagger}")
    api("javax.annotation:javax.annotation-api:1.3.2")
    api("javax.xml.bind:jaxb-api:2.3.1")
    api("mysql:mysql-connector-java:8.0.19")
    api("net.logstash.logback:logstash-logback-encoder:4.11")
    api("org.apache.commons:commons-exec:1.3")
    api("org.apache.commons:commons-lang3:3.9")
    api("org.assertj:assertj-core:3.15.0")
    api("org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}")
    api("org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}")
    api("org.codehaus.groovy:groovy-all:${versions.groovy}")
    api("org.funktionale:funktionale-partials:1.2")
    api("org.jetbrains:annotations:17.0.0")
    api("org.jetbrains.spek:spek-api:${versions.spek}")
    api("org.jetbrains.spek:spek-junit-platform-engine:${versions.spek}")
    api("org.jetbrains.spek:spek-junit-platform-runner:${versions.spek}")
    api("org.jetbrains.spek:spek-subject-extension:${versions.spek}")
    api("org.jooq:jooq:3.12.3")
    api("org.objenesis:objenesis:2.5.1")
    api("org.pf4j:pf4j:3.2.0")
    api("org.pf4j:pf4j-update:2.3.0")
    api("org.springframework.boot:spring-boot-configuration-processor:${versions.springBoot}")
    api("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.5.RELEASE")
    api("org.springframework.security.extensions:spring-security-saml-dsl-core:1.0.5.RELEASE")
    api("org.springframework.security.extensions:spring-security-saml2-core:1.0.9.RELEASE")
    api("org.threeten:threeten-extra:1.0")
  }
}
