apply plugin: "java-platform"
apply plugin: "maven-publish"

// without this building the pom fails when using the Nebula publishing plugin
configurations {
  compileOnly
}

javaPlatform {
  allowDependencies()
}

publishing {
  publications {
    nebula(MavenPublication) {
      from components.javaPlatform
    }
  }
}

ext {
  versions = [
    coroutines    : "1.1.1",
    groovy        : "2.4.15",
    hystrix       : "1.4.21",
    jsch          : "0.0.9",
    okhttp        : "2.7.0",
    okhttp3       : "3.12.2",
    retrofit      : "1.9.0",
    retrofit2     : "2.5.0",
    slf4j         : "1.7.25",
    spectator     : "0.75.0",
    spek          : "1.1.5",
    swagger       : "2.7.0",
    testcontainers: "1.10.7",
  ]
}

dependencies {
  /*
   * These are 3rd party BOMs we inherit from. Any version constraints they contain we get 
   * transitively.
   * 
   * Order matters somewhat here in that if multiple BOMs constrain the same things the FIRST wins.
   * For example, `junit-bom` and `jackson-bom` will win out over the versions of JUnit and Jackson
   * specified by `spring-boot-dependencies`.
   */
  api(platform("org.jetbrains.kotlin:kotlin-bom:1.3.30"))
  api(platform("org.junit:junit-bom:5.4.1"))
  api(platform("com.fasterxml.jackson:jackson-bom:2.9.8"))
  api(platform("org.springframework.boot:spring-boot-dependencies:1.5.17.RELEASE"))
  api(platform("com.amazonaws:aws-java-sdk-bom:1.11.469"))
  api(platform("com.squareup.okhttp3:okhttp-bom:${versions.okhttp3}"))
  api(platform("io.strikt:strikt-bom:0.20.0"))
  api(platform("org.spockframework:spock-bom:1.1-groovy-2.4"))

  constraints {
    api("cglib:cglib-nodep:3.2.0")
    api("ch.qos.logback:logback-classic:1.2.3")
    api("com.google.apis:google-api-services-monitoring:v3-rev477-1.25.0")
    api("com.h2database:h2:1.4.197")
    api("com.hubspot.jinjava:jinjava:2.4.12")
    api("com.natpryce:hamkrest:1.4.2.2")
    api("com.netflix.archaius:archaius-core:0.7.5")
    api("com.netflix.dyno:dyno-jedis:1.6.4")
    api("com.netflix.eureka:eureka-client:1.9.2")
    api("com.netflix.frigga:frigga:0.18.0")
    api("com.netflix.hystrix:hystrix-core:${versions.hystrix}")
    api("com.netflix.hystrix:hystrix-javanica:${versions.hystrix}")
    api("com.netflix.spectator:spectator-api:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-aws:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-gc:${versions.spectator}")
    api("com.netflix.spectator:spectator-ext-jvm:${versions.spectator}")
    api("com.netflix.spectator:spectator-web-spring:${versions.spectator}")
    api("com.netflix.spinnaker.embedded-redis:embedded-redis:0.8.0")
    api("com.netflix.spinnaker.moniker:moniker:0.2.0")
    api("com.nhaarman:mockito-kotlin:1.5.0")
    api("com.squareup.okhttp:okhttp-apache:${versions.okhttp}")
    api("com.squareup.okhttp:okhttp-urlconnection:${versions.okhttp}")
    api("com.squareup.okhttp:okhttp:${versions.okhttp}")
    api("com.squareup.okhttp3:logging-interceptor:${versions.okhttp3}") // see https://github.com/square/okhttp/issues/4960
    api("com.squareup.retrofit2:converter-jackson:${versions.retrofit2}")
    api("com.squareup.retrofit2:retrofit-mock:${versions.retrofit2}")
    api("com.squareup.retrofit2:retrofit:${versions.retrofit2}")
    api("com.squareup.retrofit:converter-jackson:${versions.retrofit}")
    api("com.squareup.retrofit:retrofit-mock:${versions.retrofit}")
    api("com.squareup.retrofit:retrofit:${versions.retrofit}")
    api("com.zaxxer:HikariCP:2.5.1")
    api("commons-io:commons-io:2.5")
    api("de.danielbechler:java-object-diff:0.95")
    api("de.huxhorn.sulky:de.huxhorn.sulky.ulid:8.2.0")
    api("dev.minutest:minutest:1.5.0")
    api("io.mockk:mockk:1.9.2")
    api("io.reactivex:rxjava:1.3.8")
    api("junit:junit:4.12")
    api("mysql:mysql-connector-java:8.0.15")
    api("net.logstash.logback:logstash-logback-encoder:4.11")
    api("org.apache.commons:commons-lang3:3.7")
    api("org.assertj:assertj-core:3.11.1")
    api("org.codehaus.groovy:groovy-all:${versions.groovy}")
    api("org.codehaus.groovy:groovy:${versions.groovy}")
    api("org.funktionale:funktionale-partials:1.2")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}")
    api("org.jetbrains.spek:spek-api:${versions.spek}")
    api("org.jetbrains.spek:spek-junit-platform-engine:${versions.spek}")
    api("org.jetbrains.spek:spek-subject-extension:${versions.spek}")
    api("org.jooq:jooq:3.11.9")
    api("org.liquibase:liquibase-core:3.6.3")
    api("org.mockito:mockito-core:2.23.4")
    api("org.objenesis:objenesis:2.5.1")
    api("org.projectlombok:lombok:1.18.6")
    api("org.slf4j:jcl-over-slf4j:${versions.slf4j}")
    api("org.slf4j:slf4j-api:${versions.slf4j}")
    api("org.slf4j:slf4j-simple:${versions.slf4j}")
    api("org.testcontainers:mysql:${versions.testcontainers}")
    api("org.threeten:threeten-extra:1.0")
    api("org.yaml:snakeyaml:1.23")
    api("redis.clients:jedis:2.9.3")
    api("com.jcraft:jsch.agentproxy.jsch:${versions.jsch}")
    api("com.jcraft:jsch.agentproxy.connector-factory:${versions.jsch}")
    api("com.aestasit.infrastructure.sshoogr:sshoogr:0.9.25")
    api("commons-configuration:commons-configuration:1.8")
    api("com.netflix.netflix-commons:netflix-eventbus:0.3.0")
    api("io.springfox:springfox-swagger2:${versions.swagger}")
    api("io.springfox:springfox-swagger-ui:${versions.swagger}")
  }
}
